name: Benchmarks
on:
  pull_request: { paths: ['pyproject.toml', 'uv.lock'] }
  push: { branches: [master], paths: ['pyproject.toml', 'uv.lock', 'geospeed/**', 'scripts/**', '.github/workflows/**'] }
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow pushing commits back to repo
    timeout-minutes: ${{ github.event_name == 'pull_request' && 10 || 60 }}
    steps:
      - uses: actions/checkout@v5
        with:
          lfs: true
      
      - name: Cache system packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/benchmark.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-
      
      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      
      - name: Install GDAL and Java
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y gdal-bin libgdal-dev openjdk-11-jdk
          echo "Installed GDAL version: $(gdal-config --version)"
      
      - name: Set JAVA_HOME and check system specs
        run: |
          # Set JAVA_HOME for x86_64 architecture
          echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
          export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
          echo "JAVA_HOME set to: $JAVA_HOME"
          java -version
          echo "=== System Specs ==="
          echo "CPU cores: $(nproc)"
          echo "CPU info: $(lscpu | grep 'Model name' || echo 'CPU info not available')"
          echo "Memory: $(free -h | grep '^Mem:' | awk '{print $2}')"
          echo "Disk: $(df -h / | tail -1 | awk '{print $2}')"
          echo "==================="
      - name: Sync dependencies and setup test directories
        run: uv sync && mkdir -p ALKIS_TEST/test_county
      
      - name: Install geofileops for benchmarking
        run: |
          # Check system GDAL version
          GDAL_VERSION=$(gdal-config --version)
          echo "System GDAL version: $GDAL_VERSION"
          
          # Extract major.minor version for compatibility
          GDAL_MAJOR_MINOR=$(echo $GDAL_VERSION | cut -d. -f1-2)
          echo "GDAL major.minor: $GDAL_MAJOR_MINOR"
          
          # Install geofileops with compatible GDAL version
          echo "Installing geofileops with GDAL $GDAL_VERSION compatibility"
          uv add 'geofileops>=0.8.0' "GDAL>=$GDAL_MAJOR_MINOR.0,<$(echo $GDAL_MAJOR_MINOR | awk -F. '{print $1"."($2+1)}').0" || {
            echo "Failed with version range, trying exact version"
            uv add 'geofileops>=0.8.0' "GDAL==$GDAL_VERSION" || {
              echo "Could not install geofileops with compatible GDAL version"
              echo "Skipping geofileops benchmark in this run"
            }
          }
      - name: Run benchmarks or smoke test
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            uv run python -c "import geopandas, pyogrio, duckdb; print('âœ… OK')"
          else
            timeout 3600 uv run python scripts/benchmarks.py
            uv run python scripts/update_readme.py
            git diff --quiet readme.md || {
              git config user.email "action@github.com"
              git config user.name "GitHub Action"
              git add readme.md
              git commit -m "Update benchmarks"
              git push
            }
          fi
