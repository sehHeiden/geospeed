name: Benchmarks
on:
  pull_request: { paths: ['pyproject.toml', 'uv.lock'] }
  push: { branches: [master], paths: ['pyproject.toml', 'uv.lock', 'geospeed/**', 'scripts/**', '.github/workflows/**'] }
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow pushing commits back to repo
    timeout-minutes: ${{ github.event_name == 'pull_request' && 10 || 60 }}
    steps:
      - uses: actions/checkout@v5  # No LFS needed anymore
      
      - name: Cache system packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/benchmark.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-
      
      - name: Cache ALKIS_CI data
        uses: actions/cache@v4
        id: alkis-cache
        with:
          path: ALKIS_CI
          key: alkis-ci-${{ hashFiles('scripts/alkis_config.txt') }}-${{ hashFiles('.github/workflows/benchmark.yml') }}
          restore-keys: |
            alkis-ci-
      
      - name: Download ALKIS data from Brandenburg
        if: steps.alkis-cache.outputs.cache-hit != 'true'
        run: |
          chmod +x scripts/download_alkis_data.sh
          ./scripts/download_alkis_data.sh
      
      - name: Install GDAL and Java (Ubuntu default + conda-forge)
        run: |
          # Install system packages first (faster than Nix)
          sudo apt-get update -qq
          sudo apt-get install -y gdal-bin libgdal-dev openjdk-11-jdk curl
          echo "System GDAL version: $(gdal-config --version)"
          
          # Install micromamba for faster conda-forge access if needed
          curl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba
          sudo mv bin/micromamba /usr/local/bin/
          echo "✅ GDAL installed from Ubuntu + micromamba available for upgrades"
      
      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      
      - name: Set JAVA_HOME and check system specs
        run: |
          # Set JAVA_HOME for x86_64 architecture
          echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
          export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
          echo "JAVA_HOME set to: $JAVA_HOME"
          java -version
          echo "=== System Specs ==="
          echo "CPU cores: $(nproc)"
          echo "CPU info: $(lscpu | grep 'Model name' || echo 'CPU info not available')"
          echo "Memory: $(free -h | grep '^Mem:' | awk '{print $2}')"
          echo "Disk: $(df -h / | tail -1 | awk '{print $2}')"
          echo "==================="
      - name: Sync dependencies and setup test directories
        run: uv sync && mkdir -p ALKIS_TEST/test_county
      
      # geofileops is now included in main dependencies - no need for separate installation
      - name: Run benchmarks or smoke test
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            uv run python -c "import geopandas, pyogrio, duckdb, geofileops; print('✅ OK')"
          else
            timeout 3600 uv run python scripts/benchmarks.py
            uv run python scripts/update_readme.py
            git diff --quiet readme.md || {
              git config user.email "action@github.com"
              git config user.name "GitHub Action"
              git add readme.md
              git commit -m "Update benchmarks"
              git push
            }
          fi
